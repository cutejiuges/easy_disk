// Code generated by hertz generator.

package disk_api

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	disk_api "github.com/cutejiuges/disk_api/biz/model/disk_api"
	disk_common "github.com/cutejiuges/disk_api/biz/model/disk_common"
	file_service "github.com/cutejiuges/disk_api/biz/service/file"
	"github.com/cutejiuges/disk_api/infra/localutils"
)

// QueryFileInfo .
// @router file/queryFileInfo [POST]
func QueryFileInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req disk_common.QueryFileInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := file_service.ProcessQueryFileInfo(ctx, &req)
	localutils.Wrapper(c, resp, err)
}

// DownloadFile .
// @router file/downloadFile [GET]
func DownloadFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req disk_common.DownloadFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := file_service.ProcessDownloadFile(ctx, &req)
	localutils.Wrapper(c, resp, err)
}

// EditFileInfo .
// @router file/editFileInfo [POST]
func EditFileInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req disk_common.EditFileInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := file_service.ProcessEditFileInfo(ctx, &req)
	localutils.Wrapper(c, resp, err)
}

// DeleteFile .
// @router file/deleteFile [POST]
func DeleteFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req disk_common.DeleteFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := file_service.ProcessDeleteFile(ctx, &req)
	localutils.Wrapper(c, resp, err)
}

// UploadFileBatch .
// @router /file/uploadFileBatch [POST]
func UploadFileBatch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req disk_api.UploadFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := file_service.ProcessUploadFileBatch(ctx, c, &req)
	localutils.Wrapper(c, resp, err)
}
