// Code generated by hertz generator.

package main

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cutejiuges/disk_api/conf"
	"github.com/cutejiuges/disk_api/infra/enum"
	"github.com/cutejiuges/disk_api/infra/localutils"
	"github.com/cutejiuges/disk_api/rpc"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/pprof"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"

	"io"
	"os"
	"time"
)

func main() {
	rpc.InitRpcClient()

	h := server.Default(server.WithHostPorts(conf.GetConf().Hertz.Address))
	registerMiddleware(h)

	register(h)
	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	//日志收集
	logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName + localutils.FormatTime(time.Now(), string(enum.TimeLayoutDateYYMMDD)),
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: time.Minute,
	}
	multiWriter := io.MultiWriter(asyncWriter, os.Stdout)
	hlog.SetOutput(multiWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		_ = asyncWriter.Sync()
	})
	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}
	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}
	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}
	// recovery
	h.Use(recovery.Recovery())
	// cores
	h.Use(cors.Default())
}
